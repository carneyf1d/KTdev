var liveView = {
    DOM       : "containerLive",
    width     : window.innerWidth/2,
    container : null,
    camera    : null,
    controls  : null,
    scene     : null,
    renderer  : null
}


var playbackView = {
    DOM       : "containerPlay",
    width     : window.innerWidth/2,
    container : null,
    camera    : null,
    controls  : null,
    scene     : null,
    renderer  : null
}

var _matrix = new THREE.Matrix4();

var loadedFile = [];


var playing = false;
var playCount = 0;

var ypr1 = [0,0,0];
var ypr2 = [0,0,0];
var ypr3 = [0,0,0];

// yaw | pitch | roll

// One Rotation object per sensor to keep track of each orientation (default: no rotation)
//var r = {new Rot(new PVector(1,0,0), 0), new Rot(new PVector(1,0,0), 0), new Rot(new PVector(1,0,0), 0)};

// One PVector per sensor to keep track of each rotation axis 
var axis = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];

// One float per sensor to keep track of each rotation angle
var angle = [0,0,0];

var clock = new THREE.Clock();

init(liveView);
init(playbackView);


function init(viewObj) {

    viewObj.container = document.getElementById( viewObj.DOM );

    viewObj.camera = new THREE.PerspectiveCamera( 60, viewObj.width / (window.innerHeight-200), 1, 20000 );

    viewObj.scene = new THREE.Scene();
    viewObj.scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );

    viewObj.renderer =  new THREE.WebGLRenderer();
    viewObj.renderer = new THREE.WebGLRenderer( { antialias: false } );
    viewObj.renderer.setClearColor(viewObj.scene.fog.color, 1 );

    viewObj.camera.position.x = 00; viewObj.camera.position.y = 0; viewObj.camera.position.z = -150;

    viewObj.controls = new THREE.OrbitControls( viewObj.camera, viewObj.container );

    viewObj.renderer.setSize( viewObj.width, window.innerHeight-200 );

    viewObj.container.appendChild( viewObj.renderer.domElement );


    createModel(viewObj.scene);
    
    animate();
}

function createModel(scene) {
    
    ///////// INITIAL SETUP CODE ///////////    
    var geo = new THREE.BoxGeometry(5,5,20);
    geo.applyMatrix( new THREE.Matrix4().makeRotationY( Math.PI/2 ) );
    geo.applyMatrix( new THREE.Matrix4().makeTranslation(11,0,0) );
    _mesh1 = new THREE.Mesh(geo, new THREE.MeshNormalMaterial());
    _mesh1.position.set(0,0,0);
//            _mesh1.rotation.x -= Math.PI/8;
    scene.add( _mesh1);


    _mesh2 = new THREE.Mesh(geo, new THREE.MeshNormalMaterial());
    _mesh2.position.set(21,0,0);
//            scene.add( _mesh2);

    _mesh3 = new THREE.Mesh(geo, new THREE.MeshNormalMaterial());
//    _mesh3.position.set(42,0,0);
    _mesh3.position.set(21,0,0);
//    scene.add( _mesh3);

    _mesh1.add(_mesh2);
    _mesh2.add(_mesh3);

    // put sphere at mesh origin
    var sphere = new THREE.Mesh(
        new THREE.SphereGeometry(1,20,20),
        new THREE.MeshNormalMaterial());
    sphere.position.set(_mesh1.position.x,_mesh1.position.y,_mesh1.position.z);
    scene.add(sphere);
}

function animate() {
    requestAnimationFrame( animate );
    
    if(liveView.renderer){
        render(true,liveView);
    }
    if(playbackView.renderer){
        render(true,playbackView);
    }
}


function processQuat(rs) {
    
    var x, y, z, w;
    //var yaw, pitch, roll, id;
    
//    var val = rs.split(' : ');
    
//    var rot = val[2].split('|');
    
    var rot = rs;
    
//    id = val[1];
    //pitch = parseFloat(rot[1])/75;
    //yaw = -parseFloat(rot[0])/75;
    //roll = -parseFloat(rot[2])/75;

    x = parseFloat(rot[0]);
    y = parseFloat(rot[1]);
    z = parseFloat(rot[2]);
    w = parseFloat(rot[3]);

//    if(id == 'ebf3d2fb8098') {
    //ypr1 = [yaw,pitch,roll];
    var quat1 = [x, y, z, w];
//    }
//    else if(id == 'c681de2c0057') {
//        ypr2 = [yaw-ypr1[0],pitch-ypr1[1], roll-ypr1[2]];
//    }
//    else {
//        ypr3 = [yaw-ypr2[0],pitch-ypr2[1], roll-ypr2[2]];
//    }
    
    
//    r[id] = new Rot(parseFloat(va[1]),parseFloat(va[2]),parseFloat(va[3]),parseFloat(va[4]), true);
  
//    Extract the angle-axis representation of this rotation for easy use
//    axis[id] = r[id].getAxis();
//    angle[id] = r[id].getAngle();
    
    
}



var _tick = 0;
function render(rotateBool, viewObj) {
    
//    liveView.camera.lookAt(new THREE.Vector3(-10,-10,-10));

    
    viewObj.controls.update();
    viewObj.renderer.render( viewObj.scene, viewObj.camera );
    
    if (rotateBool) {
        var quaterion = new Three.quaterion();
        quaternion.x = rot[0];
        quaternion.y = rot[1];
        quaternion.z = rot[2];
        quaternion.w = rot[3];

        ///////// RENDER CODE ///////////
       // _mesh1.rotation.x = ypr1[2] //roll;
        //_mesh1.rotation.y = ypr1[0] //yaw;
        //_mesh1.rotation.z = ypr1[1] //pitch;
        _mesh1.setRotationFromQuaternion(quaternion)
        _mesh2.rotation.x = ypr2[2] //roll;
        _mesh2.rotation.y = ypr2[0] //yaw;
        _mesh2.rotation.z = ypr2[1] //pitch;
        
        _mesh3.rotation.x = ypr3[2] //roll;
        _mesh3.rotation.y = ypr3[0] //yaw;
        _mesh3.rotation.z = ypr3[1] //pitch;

        
        ///////// END OF RENDER CODE ///////////
    }
    
    if(loadedFile.length){
        console.log(loadedFile[playCount]);
        processQuat(loadedFile[playCount]);
        if(playing){        
            if(playCount < loadedFile.length-1){
                playCount++;
                $( "#slider-range-min" ).slider({value: playCount});
            } else {
                playCount = 0;
                playing = false;
            }
        }
    }
    _tick++;
}

function showModal() {
    $('#modal').show();
}

function readSingleFile(evt) {
    //Retrieve the first (and only!) File from the FileList object
    var f = evt.target.files[0];

    if (f) {
        var r = new FileReader();
        r.onload = function (e) {
            var contents = e.target.result;
            loadedFile = contents.split('\n');
            playbackMode();
        }
        r.readAsText(f);
    } else {
        alert("Failed to load file");
    }
    $('#modal').hide()

}

function playbackMode (){
    $('#loadBtn').hide();
    $( "#slider-range-min" ).slider({
      range: "min",
      value: 0,
      min: 1,
      max: loadedFile.length - 1,
      slide: function( event, ui ) {
          playing = false;
          playCount = ui.value;
      }
    });
    $('.play_controls').show();
}

function playFile() {
    var $playBtn = $('#playBtn');
    
    if(playing){
        playing = false;
        $playBtn.text('Play');
    } else {
        playing = true;
        $playBtn.text('Pause');
    }
}

function resetFile() {
    playing = false;
    playCount = 0;
    $( "#slider-range-min" ).slider({value: playCount});
}

function initGUI() {
    
    document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
    
}
