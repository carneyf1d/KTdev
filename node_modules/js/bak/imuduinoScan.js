//@author Rick Martin
//@email richardsmartinjr@gmail.com
//@description This program will connect to 'duplicate' IMUduinos and display data from read characteristic

//Imports and constants
var noble = require('noble');
var serviceUUIDs = ["6e400001b5a3f393e0a9e50e24dcca9e"]; // default: [] => all
var allowDuplicates = false; // default: false

//Scan for available IMUDuinos
noble.on('stateChange', function(state) {
  if (state === 'poweredOn') {
    noble.startScanning(serviceUUIDs, allowDuplicates);
  } else {
    noble.stopScanning();
  }
});

//Discover IMUduinos
noble.on('discover', function(peripheral) {
    console.log('Found device with local name: ' + peripheral.advertisement.localName);
    console.log('peripheral uuid: ' + peripheral.uuid);
    console.log('advertising the following service uuid\'s: ' + peripheral.advertisement.serviceUuids);
    noble.stopScanning();
    console.log('Scanning stopped');
    console.log("Attempting to connect to :"+peripheral.uuid);
    //Connect to IMUduinos
    peripheral.connect(function(error) {
        console.log('connected to peripheral: ' + peripheral.uuid);
        //limit to only advertised service
        peripheral.discoverServices(null, function(error, services) {
	    //services[0] = 1800
	    //services[1] = 1801
	    //services[2] = 6e400001b5a3f393e0a9e50e24dcca9e
	    //services[3] = 180a
            var advertisedService = services[2];
            console.log('discovered service: '+advertisedService.uuid);
            //Discover Charateristcs 
            advertisedService.discoverCharacteristics(null,
            function(error, characteristics) {
		//characteristics[0] = 6e400002b5a3f393e0a9e50e24dcca9e write
		//characteristics[1] = 6e400003b5a3f393e0a9e50e24dcca9e read
                var readBufferCharacteristic = characteristics[1];
                console.log('discovered characteristic: '+readBufferCharacteristic.uuid);
		console.log(readBufferCharacteristic);
		//Read buffer data - This can be 'data' or 'read'
                readBufferCharacteristic.on('data', function(state){
                    console.log(new Date().getTime()+" : "+peripheral.uuid+" : "+state);
                });
                readBufferCharacteristic.notify(true);
            });
        });
//        peripheral.disconnect(function(error) {
//            console.log('disconnected from peripheral: ' + peripheral.uuid);
//        });
    });
    console.log("Done discovering: "+peripheral.uuid);
    console.log();
});
